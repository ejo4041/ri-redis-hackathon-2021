# ===================================================================
# Spring Boot configuration for the "dev" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: DEBUG
    tech.jhipster: DEBUG
    org.hibernate.SQL: DEBUG
    com.acme.caas: DEBUG

spring:
  devtools:
    restart:
      enabled: true
      additional-exclude: static/**
    livereload:
      enabled: false # we use Webpack dev server + BrowserSync for livereload
  jackson:
    serialization:
      indent-output: true
  messages:
    cache-duration: PT1S # 1 second, see the ISO 8601 standard
  thymeleaf:
    cache: false
  sleuth:
    sampler:
      probability: 1 # report 100% of traces
  zipkin: # Use the "zipkin" Maven profile to have the Spring Cloud Zipkin dependencies
    base-url: http://localhost:9411
    enabled: false
    locator:
      discovery:
        enabled: true

server:
  port: 8081

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  cache: # Cache configuration
    redis: # Redis configuration
      expiration: 3600 # By default objects stay 1 hour (in seconds) in the cache
      server: redis://localhost:6379
      cluster: false
      # server: redis://localhost:6379,redis://localhost:16379,redis://localhost:26379
      # cluster: true
  # CORS is disabled by default on microservices, as you should access them through a gateway.
  # If you want to enable it, please uncomment the configuration below.
  cors:
    allowed-origins: 'http://localhost:3000'
    allowed-methods: '*'
    allowed-headers: '*'
    exposed-headers: 'Authorization,Link,X-Total-Count'
    allow-credentials: true
    max-age: 1800
  security:
    #   authentication:
    #     jwt:
    #       # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
    #       base64-secret: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApTq/1mdrOKYj0HGYYiOf9vNQ0/7tkhXKTnum8bQb2z0iPvhAHTzlq6deRRtY269oPmiXTCF7WarvlfEXqOdRlDk538mYsdotwI9fnajo0L4IgMvWgPhFI8pFBitY5+8s0AJl6BLraeF1N9CIqde3mpkw1eHxA+6PVyhG7w9NxoSOK3QMqsexKqJxp5FadacZU0CP/BFFeK5zwv+IV6g4FhDSWXfHqAZbsL84ZjLGbBY1qwnpNewQl79YGRjkwDm707IMKjUJK0K3/dviwNIJ9sE+Yc/IXRDsMlLlYI20496oBNdX/td41ipKMJ0ZTMjV99DbCclmdpWwQ7hrxgi1EwIDAQAB
    #       # Token is valid 24 hours
    #       token-validity-in-seconds: 86400
    #       token-validity-in-seconds-for-remember-me: 2592000
    authentication.jwt.base64-secret:
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      queue-size: 512
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:
spring.redis.host: localhost
spring.redis.port: 6379
spring.autoconfigure.exclude: org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

# keycloak
keycloak.server.url.auth: http://localhost:8080/auth/realms/CaaS/protocol/openid-connect/token
keycloak.server.url.verifyToken: http://localhost:8080/auth/realms/CaaS/protocol/openid-connect/userinfo
keycloak.client.id: caas

# Redis key settings
caas.redis.key_prefix: 'caas_dev_'
caas.redis.key_object: 'caas_keys_dev'
caas.redis.socket_list: 'caas_socket_dev'
caas.redis.update_topic: 'caasUpdates_dev'
